#!/bin/sh
#
# This file is part of wormhole-tracker package released under
# the GNU GPLv3 license. See the LICENSE file for more information.

### BEGIN INIT INFO
# Provides:          wormhole-tracker
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       wormhole-tracker daemon
### END INIT INFO

APP_NAME='wormhole-tracker'
APP_HOME="/home/${APP_NAME}"

COMMAND="${APP_HOME}/.envs/${APP_NAME}/bin/${APP_NAME}"
SCRIPT="${COMMAND}"

USER="${APP_NAME}"
GROUP=''

if [ ${GROUP} ]; then
    RUN_AS=${GROUP}
elif [ ${USER} ]; then
    RUN_AS=${USER}
else
    RUN_AS=$(whoami)
fi

PIDFILE="/home/${APP_NAME}/${APP_NAME}.pid"
LOGFILE="/home/${APP_NAME}/${APP_NAME}.log"

start() {
    if ! [ -d ${PIDFILE%/*} ] ; then
        mkdir -p ${PIDFILE%/*}
    fi
    if [ -f ${PIDFILE} ] && kill -0 $(cat ${PIDFILE}); then
        echo 'Service is already running' >&2
        return 1
    fi
    echo 'Starting service…' >&2

    local CMD="${SCRIPT} &> \"${LOGFILE}\" & echo \$!"

    # Try to start service
    if [ ${GROUP} ]; then
        if sg ${RUN_AS} -c "${CMD}"  > "${PIDFILE}"; then
            echo 'Service started' >&2
            exit 0
        else
            echo 'Service start failed!'
            return 1
        fi
    else
        if su -c "${CMD}" ${RUN_AS} > "${PIDFILE}"; then
            echo 'Service started' >&2
            exit 0
        else
            echo 'Service start failed!'
            return 1
        fi
    fi
}

stop() {
    if [ ! -f ${PIDFILE} ] || ! kill -0 $(cat ${PIDFILE}); then
        echo 'Service not running' >&2
        return 1
    fi
    echo 'Stopping service…' >&2
    if kill -9 $(ps aux | fgrep "${COMMAND}" | grep -v grep | awk '{print $2}'); then
        rm -f ${PIDFILE}
        echo 'Service stopped.'
    else
        echo 'Service stop failed!' >&2
    fi
}

status() {
    printf "%-50s" "Checking ${APP_NAME}..."
    if [ -f ${PIDFILE} ]; then
        PID=$(cat ${PIDFILE})
        if [ -z "$(ps axf | grep ${PID} | grep -v grep)" ]; then
            printf "%s\n" "The process appears to be dead but pidfile still exists"
        else
            echo "Running, the PID is ${PID}"
        fi
    else
        printf "%s\n" "Service not running"
    fi
}

wait_cleanup() {
    counter=0
    echo 'Waiting for previous process to clean up...'
    while [ -n "$(ps aux | fgrep "${COMMAND}" | grep -v grep | awk '{print $2}')" ]; do
        if [[ ${counter} = 3 ]]; then
           break
        fi
        echo '...'
        let "counter += 1"
        echo ${counter}
        sleep 3
    done
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        wait_cleanup
        start
        ;;
    *)
    echo "Usage: ${0} {start|stop|status|restart|reload}"
esac
